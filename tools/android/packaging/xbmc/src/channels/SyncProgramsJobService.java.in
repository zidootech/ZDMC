/*
 * Copyright (C) 2017 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
package com.zidoo.zdmc.channels;

import android.app.job.JobParameters;
import android.app.job.JobService;
import android.content.ContentUris;
import android.content.Context;
import android.content.Intent;
import android.database.Cursor;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.PersistableBundle;
import android.util.Log;
import androidx.annotation.NonNull;
import androidx.tvprovider.media.tv.Channel;
import androidx.tvprovider.media.tv.PreviewProgram;
import androidx.tvprovider.media.tv.TvContractCompat;

import com.zidoo.zdmc.Splash;
import com.zidoo.zdmc.XBMCJsonRPC;
import com.zidoo.zdmc.model.Movie;
import com.zidoo.zdmc.model.TVShow;
import com.zidoo.zdmc.model.TVEpisode;
import com.zidoo.zdmc.model.File;
import com.zidoo.zdmc.model.Media;
import com.zidoo.zdmc.channels.model.Subscription;
import com.zidoo.zdmc.channels.model.XBMCDatabase;
import com.zidoo.zdmc.channels.util.TvUtil;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/**
 * Syncs programs for a channel. A channel id is required to be passed via the {@link
 * JobParameters}. This service is scheduled to listen to changes to a channel. Once the job
 * completes, it will reschedule itself to listen for the next change to the channel. See {@link
 * TvUtil#scheduleTriggeredSyncingProgramsForChannel(Context, long)} for more details about the scheduling.
 */
public class SyncProgramsJobService extends JobService
{

  private static final String TAG = "SyncProgramsJobService";

  private SyncProgramsTask mSyncProgramsTask;

  @Override
  public boolean onStartJob(final JobParameters jobParameters)
  {
    Log.d(TAG, "onStartJob(): " + jobParameters);

    final long channelId = getChannelId(jobParameters);
    if (channelId == -1L)
    {
      return false;
    }
    Log.d(TAG, "onStartJob(): Scheduling syncing for programs for channel " + channelId);

    mSyncProgramsTask =
            new SyncProgramsTask(getApplicationContext())
            {
              @Override
              protected void onPostExecute(Boolean finished)
              {
                super.onPostExecute(finished);
                // Daisy chain listening for the next change to the channel.
                TvUtil.scheduleTriggeredSyncingProgramsForChannel(
                        SyncProgramsJobService.this, channelId);
                mSyncProgramsTask = null;
                jobFinished(jobParameters, !finished);
              }
            };
    mSyncProgramsTask.execute(channelId);

    return true;
  }

  @Override
  public boolean onStopJob(JobParameters jobParameters)
  {
    if (mSyncProgramsTask != null)
    {
      mSyncProgramsTask.cancel(true);
    }
    return true;
  }

  private long getChannelId(JobParameters jobParameters)
  {
    PersistableBundle extras = jobParameters.getExtras();
    if (extras == null)
    {
      return -1L;
    }

    return extras.getLong(TvContractCompat.EXTRA_CHANNEL_ID, -1L);
  }

  private class SyncProgramsTask extends AsyncTask<Long, Void, Boolean>
  {

    private final Context mContext;

    private SyncProgramsTask(Context context)
    {
      this.mContext = context;
    }

    @Override
    protected Boolean doInBackground(Long... channelIds)
    {
      XBMCJsonRPC json = new XBMCJsonRPC();
      if (!json.Ping())
        return false;
      json = null;

      List<Long> params = Arrays.asList(channelIds);
      if (!params.isEmpty())
      {
        for (Long channelId : params)
        {
          Subscription subscription =
                  XBMCDatabase.findSubscriptionByChannelId(mContext, channelId);
          if (subscription != null)
          {
            List<Media> cachedMedias = XBMCDatabase.getMedias(mContext, channelId);
            syncPrograms(channelId, subscription.getUri(), cachedMedias);
          }
        }
      }
      return true;
    }

    /*
 * Syncs programs by querying the given channel id.
 *
 * If the channel is not browsable, the programs will be removed to avoid showing
 * stale programs when the channel becomes browsable in the future.
 *
 * If the channel is browsable, then it will check if the channel has any programs.
 *      If the channel does not have any programs, new programs will be added.
 *      If the channel does have programs, then a fresh list of programs will be fetched and the
 *          channel's programs will be updated.
 */
    private void syncPrograms(long channelId, String uri, List<Media> initialMedias)
    {
      Log.d(TAG, "Sync programs for channel: " + channelId);
      List<Media> medias = new ArrayList<>(initialMedias);

      try (Cursor cursor =
                   getContentResolver()
                           .query(
                                   TvContractCompat.buildChannelUri(channelId),
                                   null,
                                   null,
                                   null,
                                   null))
      {
        if (cursor != null && cursor.moveToNext())
        {
          Channel channel = Channel.fromCursor(cursor);
          
          XBMCJsonRPC jsonrpc = new XBMCJsonRPC();
          if (uri.isEmpty())
          {
            // Suggestion channel
            Log.d(TAG, "Suggestion channel is browsable: " + channelId);

            deletePrograms(channelId, medias);
            medias = createPrograms(channelId, jsonrpc.getSuggestions());
          }
          else
          {
            Log.d(TAG, "Channel is browsable: " + channelId);

            String xbmcURL = Uri.parse(uri).getFragment();
            List<File> files = jsonrpc.getFiles(xbmcURL);

            deletePrograms(channelId, medias);
            medias = createPrograms(channelId, jsonrpc.getMedias(files));
          }
          jsonrpc = null;
        }
        XBMCDatabase.saveMedias(getApplicationContext(), channelId, medias);
      }
    }

    private List<Media> createPrograms(long channelId, List<Media> medias)
    {
      List<Media> mediasAdded = new ArrayList<>(medias.size());
      for (Media media : medias)
      {
        PreviewProgram previewProgram = buildProgram(channelId, media);

        Uri programUri =
                getContentResolver()
                        .insert(
                                TvContractCompat.PreviewPrograms.CONTENT_URI,
                                previewProgram.toContentValues());
        long programId = ContentUris.parseId(programUri);
        Log.d(TAG, "Inserted new program: " + programId);
        media.setProgramId(programId);
        mediasAdded.add(media);
      }

      return mediasAdded;
    }

    private void deletePrograms(long channelId, List<Media> medias)
    {
      if (medias.isEmpty())
      {
        return;
      }

      int count = 0;
      for (Media media : medias)
      {
        count +=
                getContentResolver()
                        .delete(
                                TvContractCompat.buildPreviewProgramUri(media.getProgramId()),
                                null,
                                null);
      }
      Log.d(TAG, "Deleted " + count + " programs for  channel " + channelId);

      // Remove our local records to stay in sync with the TV Provider.
      XBMCDatabase.removeMedias(getApplicationContext(), channelId);
    }

    @NonNull
    private PreviewProgram buildProgram(long channelId, Media media)
    {
      Intent detailsIntent = new Intent(mContext, Splash.class);
      detailsIntent.setAction(Intent.ACTION_GET_CONTENT);
      detailsIntent.setData(Uri.parse(media.getXbmcUrl()));

      PreviewProgram.Builder builder = new PreviewProgram.Builder();
      builder.setChannelId(channelId)
              .setTitle(media.getTitle())
              .setDescription(media.getDescription())
              .setIntent(detailsIntent);

      if(media.getCategory().equals(Media.MEDIA_TYPE_MOVIE))
        builder.setType(TvContractCompat.PreviewProgramColumns.TYPE_MOVIE);
      else if(media.getCategory().equals(Media.MEDIA_TYPE_TVSHOW))
        builder.setType(TvContractCompat.PreviewProgramColumns.TYPE_TV_SERIES);
      else if(media.getCategory().equals(Media.MEDIA_TYPE_TVEPISODE))
        builder.setType(TvContractCompat.PreviewProgramColumns.TYPE_TV_EPISODE);
      else if(media.getCategory().equals(Media.MEDIA_TYPE_ALBUM))
        builder.setType(TvContractCompat.PreviewProgramColumns.TYPE_ALBUM);
      else if(media.getCategory().equals(Media.MEDIA_TYPE_SONG))
        builder.setType(TvContractCompat.PreviewProgramColumns.TYPE_TRACK);
      else if(media.getCategory().equals(Media.MEDIA_TYPE_MUSICVIDEO))
        builder.setType(TvContractCompat.PreviewProgramColumns.TYPE_CLIP);

      if (media.getCardImageUrl() != null)
      {
        builder.setPosterArtUri(Uri.parse(media.getCardImageUrl()));
        if (media.getCardImageAspectRatio().equals("2:3"))
          builder.setPosterArtAspectRatio(TvContractCompat.PreviewProgramColumns.ASPECT_RATIO_2_3);
        else if (media.getCardImageAspectRatio().equals("1:1"))
          builder.setPosterArtAspectRatio(TvContractCompat.PreviewProgramColumns.ASPECT_RATIO_1_1);
        else
          builder.setPosterArtAspectRatio(TvContractCompat.PreviewProgramColumns.ASPECT_RATIO_16_9);
      }
      else if (media.getBackgroundImageUrl() != null)
      {
        builder.setPosterArtUri(Uri.parse(media.getBackgroundImageUrl()));
        builder.setPosterArtAspectRatio(TvContractCompat.PreviewProgramColumns.ASPECT_RATIO_16_9);
      }
      if (media.getVideoUrl() != null)
        builder.setPreviewVideoUri(Uri.parse(media.getVideoUrl()));

      if (media instanceof Movie)
      {
        Movie movie = Movie.class.cast(media);
        builder.setReleaseDate(movie.getYear());
        builder.setDurationMillis(movie.getDuration());
        if (movie.getRating() != null)
        {
          builder.setReviewRating(movie.getRating());
          builder.setReviewRatingStyle(TvContractCompat.Programs.REVIEW_RATING_STYLE_STARS);
        }
      }
      if (media instanceof TVShow)
      {
        TVShow tvshow = TVShow.class.cast(media);
        builder.setReleaseDate(tvshow.getYear());
        if (tvshow.getRating() != null)
        {
          builder.setReviewRating(tvshow.getRating());
          builder.setReviewRatingStyle(TvContractCompat.Programs.REVIEW_RATING_STYLE_STARS);
        }
      }
      if (media instanceof TVEpisode)
      {
        TVEpisode tvepisode = TVEpisode.class.cast(media);
        builder.setTitle(tvepisode.getShowTitle());
        builder.setEpisodeTitle(tvepisode.getTitle());
        builder.setSeasonNumber(tvepisode.getSeason());
        builder.setEpisodeNumber(tvepisode.getEpisode());
        builder.setDurationMillis(tvepisode.getDuration());
        builder.setReleaseDate(tvepisode.getFirstaired());
        if (tvepisode.getRating() != null)
        {
          builder.setReviewRating(tvepisode.getRating());
          builder.setReviewRatingStyle(TvContractCompat.Programs.REVIEW_RATING_STYLE_STARS);
        }
      }

      return builder.build();
    }
  }
}
